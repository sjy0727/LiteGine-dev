# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(Glad LANGUAGES C CXX)

# target
add_library(Glad STATIC "")
set_target_properties(Glad PROPERTIES OUTPUT_NAME "Glad")
set_target_properties(Glad PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(Glad PRIVATE
    Hazel/vendor/Glad/include
)
target_compile_definitions(Glad PRIVATE
    HZ_PLATFORM
    HZ_ENABLE_ASSERTS
)
set_target_properties(Glad PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(Glad PRIVATE c_std_11)
if(MSVC)
    set_property(TARGET Glad PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(Glad PRIVATE
    z
)
target_sources(Glad PRIVATE
    Hazel/vendor/Glad/src/glad.c
)

# target
add_library(Hazel STATIC "")
set_target_properties(Hazel PROPERTIES OUTPUT_NAME "Hazel")
set_target_properties(Hazel PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
add_dependencies(Hazel Glad ImGui glfw)
target_precompile_headers(Hazel PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/Hazel/src/hzpch.h>
)
target_include_directories(Hazel PRIVATE
    Hazel/src
    Hazel/src/Hazel
    Hazel/vendor/glm
    Hazel/vendor/Glad/include
    Hazel/vendor/glfw/include
    Hazel/vendor/spdlog/include
    Hazel/vendor/ImGui/include
    Hazel/vendor/ImGui/include/ImGui
)
target_compile_definitions(Hazel PRIVATE
    HZ_PLATFORM
    HZ_ENABLE_ASSERTS
    GL_SILENCE_DEPRECATION
    GLFW_INCLUDE_NONE
    _GLFW_COCOA
)
target_compile_options(Hazel PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-D_CRT_SECURE_NO_WARNINGS>
    $<$<COMPILE_LANGUAGE:CXX>:-D_CRT_SECURE_NO_WARNINGS>
    $<$<COMPILE_LANGUAGE:C>:-Wno-switch>
    $<$<COMPILE_LANGUAGE:CXX>:-Wno-switch>
)
set_target_properties(Hazel PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(Hazel PRIVATE cxx_std_17)
if(MSVC)
    set_property(TARGET Hazel PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(Hazel PRIVATE
    glfw
    ImGui
    Glad
    "-framework OpenGL"
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreVideo"
    "-framework CoreFoundation"
    "-framework Foundation"
    z
)
target_link_directories(Hazel PRIVATE
    build/macosx/arm64/release
)
target_sources(Hazel PRIVATE
    Hazel/src/hzpch.cpp
    Hazel/src/Platform/ImGuiBackend/imgui_impl_opengl3.cpp
    Hazel/src/Platform/ImGuiBackend/imgui_impl_glfw.cpp
    Hazel/src/Platform/MacOS/MacInput.cpp
    Hazel/src/Platform/MacOS/MacWindow.cpp
    Hazel/src/Platform/OpenGL/OpenGLBuffer.cpp
    Hazel/src/Platform/OpenGL/OpenGLContext.cpp
    Hazel/src/Platform/OpenGL/OpenGLVertexArray.cpp
    Hazel/src/Platform/OpenGL/OpenGLRendererAPI.cpp
    Hazel/src/Hazel/Renderer/VertexArray.cpp
    Hazel/src/Hazel/Renderer/RenderCommand.cpp
    Hazel/src/Hazel/Renderer/Shader.cpp
    Hazel/src/Hazel/Renderer/Buffer.cpp
    Hazel/src/Hazel/Renderer/RendererAPI.cpp
    Hazel/src/Hazel/Renderer/Renderer.cpp
    Hazel/src/Hazel/Log.cpp
    Hazel/src/Hazel/Window.cpp
    Hazel/src/Hazel/ImGui/ImGuiLayer.cpp
    Hazel/src/Hazel/Layer.cpp
    Hazel/src/Hazel/LayerStack.cpp
    Hazel/src/Hazel/Application.cpp
    Hazel/src/Hazel/Editor/Editor.cpp
)

# target
add_library(ImGui STATIC "")
set_target_properties(ImGui PROPERTIES OUTPUT_NAME "ImGui")
set_target_properties(ImGui PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_compile_definitions(ImGui PRIVATE
    HZ_PLATFORM
    HZ_ENABLE_ASSERTS
)
set_target_properties(ImGui PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(ImGui PRIVATE cxx_std_11)
if(MSVC)
    set_property(TARGET ImGui PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(ImGui PRIVATE
    "-framework OpenGL"
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreVideo"
    "-framework CoreFoundation"
    z
)
target_sources(ImGui PRIVATE
    Hazel/vendor/ImGui/include/ImGui/imgui_widgets.cpp
    Hazel/vendor/ImGui/include/ImGui/TextEditor.cpp
    Hazel/vendor/ImGui/include/ImGui/imgui_widget_flamegraph.cpp
    Hazel/vendor/ImGui/include/ImGui/imgui.cpp
    Hazel/vendor/ImGui/include/ImGui/ImGuizmo.cpp
    Hazel/vendor/ImGui/include/ImGui/imgui_tables.cpp
    Hazel/vendor/ImGui/include/ImGui/imgui_demo.cpp
    Hazel/vendor/ImGui/include/ImGui/imgui_draw.cpp
)

# target
add_executable(LiteGine "")
set_target_properties(LiteGine PROPERTIES OUTPUT_NAME "LiteGine")
set_target_properties(LiteGine PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
add_dependencies(LiteGine Hazel)
target_include_directories(LiteGine PRIVATE
    Hazel/src
    Hazel/vendor/glm
    Hazel/vendor/ImGui/include
    Hazel/vendor/ImGui/include/ImGui
    Hazel/vendor/glfw/include
    Hazel/vendor/spdlog/include
)
target_compile_definitions(LiteGine PRIVATE
    HZ_PLATFORM
    HZ_ENABLE_ASSERTS
)
set_target_properties(LiteGine PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(LiteGine PRIVATE cxx_std_17)
if(MSVC)
    set_property(TARGET LiteGine PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(LiteGine PRIVATE
    Hazel
    glfw
    ImGui
    Glad
    "-framework OpenGL"
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreVideo"
    "-framework CoreFoundation"
    "-framework Foundation"
    z
)
target_link_directories(LiteGine PRIVATE
    build/macosx/arm64/release
)
target_link_options(LiteGine PRIVATE
    -stdlib=libc++
)
target_sources(LiteGine PRIVATE
    Sandbox/src/SandboxApp.cpp
)

# target
add_library(glfw STATIC "")
set_target_properties(glfw PROPERTIES OUTPUT_NAME "glfw")
set_target_properties(glfw PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_compile_definitions(glfw PRIVATE
    HZ_PLATFORM
    HZ_ENABLE_ASSERTS
    _GLFW_COCOA
)
if(MSVC)
    target_compile_options(glfw PRIVATE nil)
else()
    target_compile_options(glfw PRIVATE nil)
endif()
set_target_properties(glfw PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(glfw PRIVATE c_std_11)
if(MSVC)
    set_property(TARGET glfw PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(glfw PRIVATE
    "-framework Foundation"
    "-framework CoreFoundation"
    z
)
target_sources(glfw PRIVATE
    Hazel/vendor/glfw/src/context.c
    Hazel/vendor/glfw/src/init.c
    Hazel/vendor/glfw/src/input.c
    Hazel/vendor/glfw/src/monitor.c
    Hazel/vendor/glfw/src/null_init.c
    Hazel/vendor/glfw/src/null_joystick.c
    Hazel/vendor/glfw/src/null_monitor.c
    Hazel/vendor/glfw/src/null_window.c
    Hazel/vendor/glfw/src/platform.c
    Hazel/vendor/glfw/src/vulkan.c
    Hazel/vendor/glfw/src/window.c
    Hazel/vendor/glfw/src/cocoa_time.c
    Hazel/vendor/glfw/src/posix_thread.c
    Hazel/vendor/glfw/src/posix_module.c
    Hazel/vendor/glfw/src/osmesa_context.c
    Hazel/vendor/glfw/src/egl_context.c
    Hazel/vendor/glfw/src/cocoa_init.m
    Hazel/vendor/glfw/src/cocoa_monitor.m
    Hazel/vendor/glfw/src/cocoa_window.m
    Hazel/vendor/glfw/src/cocoa_joystick.m
    Hazel/vendor/glfw/src/nsgl_context.m
)

